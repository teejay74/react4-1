{"version":3,"sources":["components/Converter/RgbWidget/RgbWidget.jsx","components/Converter/Converter.jsx","App.js","reportWebVitals.js","index.js"],"names":["RgbWidget","props","show","codeRGB","className","Converter","useState","color","rgb","setRGB","hexToRgb","hex","result","exec","r","parseInt","g","b","style","backgroundColor","onSubmit","e","preventDefault","onChange","target","value","length","startsWith","o","res","prevRGB","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAEe,SAASA,EAAUC,GAAQ,IAC9BC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OAAID,EAGA,qBAAKE,UAAU,WAAf,SACCD,IAJY,KCDN,SAASE,IAAa,IAAD,EACVC,mBAAS,CAC3BH,QAAS,GACTI,MAAO,GACPL,MAAM,IAJsB,mBACzBM,EADyB,KACpBC,EADoB,KAMhC,SAASC,EAASC,GACd,IAAIC,EAAS,4CAA4CC,KAAKF,GAC9D,OAAOC,EAAS,CACdE,EAAGC,SAASH,EAAO,GAAI,IACvBI,EAAGD,SAASH,EAAO,GAAI,IACvBK,EAAGF,SAASH,EAAO,GAAI,KACrB,KA4BR,OACI,qBAAKR,UAAU,OAAOc,MAAO,CAACC,gBAAiBX,EAAID,OAAnD,SACI,qBAAKH,UAAU,aAAf,SACA,uBAAMA,UAAU,OAAOgB,SAPR,SAACC,GACpBA,EAAEC,kBAME,UACI,uBAAOlB,UAAU,QAAQmB,SA7Bd,SAACF,GACpB,GAAGA,EAAEG,OAAOC,MAAMC,QAAU,EAExB,GAAIL,EAAEG,OAAOC,MAAME,WAAW,MAAmC,OAA3BjB,EAASW,EAAEG,OAAOC,OAKxD,CACI,IAAIG,EAAIlB,EAASW,EAAEG,OAAOC,OACtBI,EAAG,cAAUD,EAAEd,EAAZ,YAAiBc,EAAEZ,EAAnB,YAAwBY,EAAEX,EAA1B,KACPR,GAAO,SAAAqB,GAAO,kCAASA,GAAT,IAAkB3B,QAAS0B,EAAKtB,MAAOsB,EAAK3B,MAAM,YANhEO,GAAO,SAAAqB,GAAO,kCAASA,GAAT,IAAkB3B,QAAS,wCAAWI,MAAO,gBAAiBL,MAAM,YAWtFO,GAAO,SAAAqB,GAAO,kCAASA,GAAT,IAAkB3B,QAAS,GAAII,MAAO,GAAIL,MAAM,UAc1D,cAAC,EAAD,CAAOA,KAAMM,EAAIN,KAAMC,QAASK,EAAIL,iBCvCrC4B,MARf,WACE,OACE,qBAAK3B,UAAU,MAAf,SACE,cAAC,EAAD,OCOS4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2a3fe18d.chunk.js","sourcesContent":["import './RgbWidget.css';\n\nexport default function RgbWidget(props) {\n    const { show, codeRGB } = props;\n\n    if(!show) return null;\n    else {\n        return(\n        <div className=\"RGB-code\">\n        {codeRGB}\n        </div>)\n    }\n}","import { useState } from 'react';\nimport './Converter.css';\nimport Label from './RgbWidget/RgbWidget';\n\nexport default function Converter() {\n    const [rgb, setRGB] = useState({\n        codeRGB: '',\n        color: '',\n        show: false\n    });\n    function hexToRgb(hex) {\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? {\n          r: parseInt(result[1], 16),\n          g: parseInt(result[2], 16),\n          b: parseInt(result[3], 16)\n        } : null;\n      }    \n\n    const onChangeHandle = (e) => {\n        if(e.target.value.length >= 7)\n        {\n            if(!e.target.value.startsWith('#') || hexToRgb(e.target.value)===null)\n            {\n                setRGB(prevRGB => ({...prevRGB, codeRGB: 'Ошибка!', color: 'rgb(220,20,5)', show: true }));\n            }\n            else \n            {\n                let o = hexToRgb(e.target.value);\n                let res = `rgb(${o.r},${o.g},${o.b})`;\n                setRGB(prevRGB => ({...prevRGB, codeRGB: res, color: res, show: true }));\n            }\n        }\n        else \n        {\n            setRGB(prevRGB => ({...prevRGB, codeRGB: '', color: '', show: false }));\n        }\n\n    }\n\n    const onSubmitHandle = (e) => {\n        e.preventDefault();\n    }\n\n    return(\n        <div className=\"Main\" style={{backgroundColor: rgb.color}}>\n            <div className=\"Form-Block\">\n            <form className=\"Form\" onSubmit={onSubmitHandle} >\n                <input className=\"Input\" onChange={onChangeHandle}></input>\n                <Label show={rgb.show} codeRGB={rgb.codeRGB} />\n            </form>\n            </div>\n        </div>\n    )\n}","import Converter from './components/Converter/Converter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}